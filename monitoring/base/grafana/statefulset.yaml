apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-init-script
data:
  init.sh: |-
    #!/bin/bash
    # Download node-exporter-full dashboard JSON,
    # then replace ${DS_PROMETHEUS} to "prometheus"
    # because ${DS_PROMETHEUS} is not available in provisioning
    curl -sSLf https://grafana.com/api/dashboards/1860/revisions/14/download | \
    jq '(.rows[].panels[] | select(.datasource == "${DS_PROMETHEUS}") | .datasource) |= "prometheus"' | \
    jq '(.templating.list[] | select(.datasource == "${DS_PROMETHEUS}") | .datasource) |= "prometheus"' \
    > /config/node-exporter.json
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: grafana
  labels:
    app.kubernetes.io/name: grafana
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: grafana
  serviceName: grafana
  template:
    metadata:
      labels:
        app.kubernetes.io/name: grafana
    spec:
      initContainers:
        # JSON of https://grafana.com/api/dashboards/1860 is too large to create ConfigMap by kubectl, so use init container
        - image: quay.io/cybozu/ubuntu-debug:18.04
          imagePullPolicy: IfNotPresent
          name: grafana-initconfig
          command: ["/bin/init.sh"]
          env:
            - name: HTTPS_PROXY
              value: http://squid.internet-egress.svc.cluster.local:3128
          volumeMounts:
            - name: grafana-init-script-volume
              readOnly: true
              mountPath: /bin/init.sh
              subPath: init.sh
            - name: dashboard-node-exporter-volume
              mountPath: /config
      containers:
        - env:
            - name: GF_SECURITY_ADMIN_USER
              valueFrom:
                secretKeyRef:
                  key: admin-user
                  name: grafana
            - name: GF_SECURITY_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: admin-password
                  name: grafana
          image: quay.io/cybozu/grafana:6.7.2.2
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 10
            httpGet:
              path: /api/health
              port: 3000
              scheme: HTTP
            initialDelaySeconds: 60
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 30
          name: grafana
          ports:
            - containerPort: 3000
              name: grafana
              protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /api/health
              port: 3000
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
            - mountPath: /etc/grafana/grafana.ini
              name: config
              subPath: grafana.ini
            - mountPath: /etc/grafana/ldap.toml
              name: ldap
              subPath: ldap.toml
            - mountPath: /var/lib/grafana
              name: storage
            - name: dashboard-argocd-volume
              mountPath: /var/lib/grafana/dashboards/argocd
            - name: dashboard-calico-volume
              mountPath: /var/lib/grafana/dashboards/calico
            - name: dashboard-cert-manager-volume
              mountPath: /var/lib/grafana/dashboards/cert-manager
            - name: dashboard-contour-volume
              mountPath: /var/lib/grafana/dashboards/contour
            - name: dashboard-etcd-volume
              mountPath: /var/lib/grafana/dashboards/etcd
            - name: dashboard-kube-apiserver
              mountPath: /var/lib/grafana/dashboards/kube-apiserver
            - name: dashboard-kube-controller-manager
              mountPath: /var/lib/grafana/dashboards/kube-controller-manager
            - name: dashboard-kube-scheduler
              mountPath: /var/lib/grafana/dashboards/kube-scheduler
            - name: dashboard-kubelet
              mountPath: /var/lib/grafana/dashboards/kubelet
            - name: dashboard-kubernetes-cluster-volume
              mountPath: /var/lib/grafana/dashboards/kubernetes-cluster
            - name: dashboard-kubernetes-persistence-volumes-volume
              mountPath: /var/lib/grafana/dashboards/kubernetes-persistence-volumes
            - name: dashboard-memory-usage-volume
              mountPath: /var/lib/grafana/dashboards/memory-usage
            - name: dashboard-cpu-usage-volume
              mountPath: /var/lib/grafana/dashboards/cpu-usage
            - name: dashboard-topolvm-volumegroup-volume
              mountPath: /var/lib/grafana/dashboards/topolvm-volumegroup
            - name: dashboard-local-pv-provisioner-volume
              mountPath: /var/lib/grafana/dashboards/local-pv-provisioner
            - name: dashboard-sabakan-volume
              mountPath: /var/lib/grafana/dashboards/sabakan
            - name: dashboard-all-nodes-volume
              mountPath: /var/lib/grafana/dashboards/all-nodes
            - name: dashboard-node-exporter-volume
              mountPath: /var/lib/grafana/dashboards/node-exporter
            - name: dashboard-neco-admission-volume
              mountPath: /var/lib/grafana/dashboards/neco-admission
            - name: dashboard-provider
              mountPath: /etc/grafana/provisioning/dashboards
            - name: datasources-provider
              mountPath: /etc/grafana/provisioning/datasources
      priorityClassName: node-bound
      securityContext:
        fsGroup: 10000
        runAsUser: 10000
      volumes:
        - name: grafana-init-script-volume
          configMap:
            name: grafana-init-script
            defaultMode: 0777
        - configMap:
            defaultMode: 420
            name: grafana
          name: config
        - name: ldap
          secret:
            defaultMode: 420
            items:
              - key: ldap-toml
                path: ldap.toml
            secretName: grafana
        - name: dashboard-argocd-volume
          configMap:
            name: dashboard-argocd
        - name: dashboard-calico-volume
          configMap:
            name: dashboard-calico
        - name: dashboard-cert-manager-volume
          configMap:
            name: dashboard-cert-manager
        - name: dashboard-contour-volume
          configMap:
            name: dashboard-contour
        - name: dashboard-etcd-volume
          configMap:
            name: dashboard-etcd
        - name: dashboard-kube-apiserver
          configMap:
              name: dashboard-kube-apiserver
        - name: dashboard-kube-controller-manager
          configMap:
              name: dashboard-kube-controller-manager
        - name: dashboard-kube-scheduler
          configMap:
              name: dashboard-kube-scheduler
        - name: dashboard-kubelet
          configMap:
              name: dashboard-kubelet
        - name: dashboard-kubernetes-cluster-volume
          configMap:
            name: dashboard-kubernetes-cluster
        - name: dashboard-kubernetes-persistence-volumes-volume
          configMap:
            name: dashboard-kubernetes-persistence-volumes
        - name: dashboard-memory-usage-volume
          configMap:
            name: dashboard-memory-usage
        - name: dashboard-cpu-usage-volume
          configMap:
            name: dashboard-cpu-usage
        - name: dashboard-topolvm-volumegroup-volume
          configMap:
            name: dashboard-topolvm-volumegroup
        - name: dashboard-local-pv-provisioner-volume
          configMap:
            name: dashboard-local-pv-provisioner
        - name: dashboard-sabakan-volume
          configMap:
            name: dashboard-sabakan
        - name: dashboard-all-nodes-volume
          configMap:
            name: dashboard-all-nodes
        - name: dashboard-neco-admission-volume
          configMap:
            name: dashboard-neco-admission
        - name: dashboard-node-exporter-volume
          emptyDir: {}
        - name: dashboard-provider
          configMap:
            name: grafana-dash-provider
            items:
              - key: providers.yaml
                path: providers.yaml
        - name: datasources-provider
          configMap:
            name: grafana-datasources-provider
            items:
              - key: providers.yaml
                path: providers.yaml
  volumeClaimTemplates:
    - metadata:
        name: storage
      spec:
        accessModes: [ "ReadWriteOnce" ]
        storageClassName: topolvm-provisioner
        resources:
          requests:
            storage: 1Gi
